{
  "language": "Solidity",
  "sources": {
    "interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity >= 0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}"
    },
    "interfaces/IRedSnwapper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >= 0.8.0;\n\ninterface IRedSnwapper {\n    struct InputToken {\n        address token;\n        uint256 amountIn;\n        address transferTo;\n    }\n\n    struct OutputToken {\n        address token;\n        address recipient;\n        uint256 amountOutMin;\n    }\n\n    struct Executor {\n        address executor;\n        uint256 value;\n        bytes data;\n    }\n\n    function snwap(\n        address tokenIn,\n        uint256 amountIn,\n        address recipient,\n        address tokenOut,\n        uint256 amountOutMin,\n        address executor,\n        bytes calldata executorData\n    ) external returns (uint256 amountOut);\n\n    function snwapMultiple(\n        InputToken[] calldata inputTokens,\n        OutputToken[] calldata outputTokens,\n        Executor[] calldata executors\n    ) external returns (uint256[] memory amountOut);\n}\n"
    },
    "openzeppelin/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "openzeppelin/access/Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() external {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n}\n"
    },
    "openzeppelin/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "src/Auth.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.8.0;\n\nimport \"openzeppelin/access/Ownable2Step.sol\";\n\nabstract contract Auth is Ownable2Step {\n\n    event SetTrusted(address indexed user, bool isTrusted);\n\n    mapping(address => bool) public trusted;\n\n    error OnlyTrusted();\n\n    modifier onlyTrusted() {\n        if (!trusted[msg.sender]) revert OnlyTrusted();\n        _;\n    }\n\n    constructor(address trustedUser) {\n        trusted[trustedUser] = true;\n        emit SetTrusted(trustedUser, true);\n    }\n\n    function setTrusted(address user, bool isTrusted) external onlyOwner {\n        trusted[user] = isTrusted;\n        emit SetTrusted(user, isTrusted);\n    }\n\n}"
    },
    "src/TokenChwomper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.8.0;\n\nimport \"interfaces/IRedSnwapper.sol\";\nimport \"interfaces/IERC20.sol\";\nimport \"./Auth.sol\";\n\n/// @title TokenChwomper for selling accumulated tokens for weth or other base assets\n/// @notice This contract will be used for fee collection and breakdown\n/// @dev Uses Auth contract for 2-step owner process and trust operators to guard functions\ncontract TokenChwomper is Auth {\n  address public immutable weth;\n  IRedSnwapper public redSnwapper;\n\n  bytes4 private constant TRANSFER_SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n\n  error TransferFailed();\n\n  constructor(\n    address _operator,\n    address _redSnwapper,\n    address _weth\n  ) Auth(_operator) {\n    // initial owner is msg.sender\n    redSnwapper = IRedSnwapper(_redSnwapper);\n    weth = _weth;\n  }\n\n  /// @notice Updates the RedSnwapper to be used for swapping tokens\n  /// @dev make sure new RedSnwapper is backwards compatiable (should be)\n  /// @param _redSnwapper The address of the new route processor\n  function updateRedSnwapper(address _redSnwapper) external onlyOwner {\n    redSnwapper = IRedSnwapper(_redSnwapper);\n  }\n  \n  /// @notice Swaps tokens via the configured RedSnwapper\n  /// @dev Must be called by a trusted operator\n  /// @param tokenIn Address of the input token\n  /// @param amountIn Amount of the input token to swap\n  /// @param recipient Address to receive the output tokens\n  /// @param tokenOut Address of the output token\n  /// @param amountOutMin Minimum acceptable amount of output tokens (slippage protection)\n  /// @param executor Address of the executor contract to perform the swap logic\n  /// @param executorData Encoded data for the executor call\n  /// @return amountOut The actual amount of output tokens received\n  function snwap(\n    address tokenIn,\n    uint256 amountIn,\n    address recipient,\n    address tokenOut,\n    uint256 amountOutMin,\n    address executor,\n    bytes calldata executorData\n  ) external onlyTrusted returns (uint256 amountOut) {\n     // Pre-fund RedSnwapper with input tokens\n     _safeTransfer(tokenIn, address(redSnwapper), amountIn);\n\n    // Execute snwap with zero amountIn\n    amountOut = redSnwapper.snwap(\n      tokenIn,\n      0,\n      recipient,\n      tokenOut,\n      amountOutMin,\n      executor,\n      executorData\n    );\n  }\n\n  /// @notice Performs multiple swaps via the configured RedSnwapper\n  /// @dev Must be called by a trusted operator\n  /// @param inputTokens Array of input token parameters\n  /// @param outputTokens Array of output token requirements\n  /// @param executors Array of executor calls to perform\n  /// @return amountOut Array of actual amounts of output tokens received\n  function snwapMultiple(\n    IRedSnwapper.InputToken[] calldata inputTokens,\n    IRedSnwapper.OutputToken[] calldata outputTokens,\n    IRedSnwapper.Executor[] calldata executors\n  ) external onlyTrusted returns (uint256[] memory amountOut) {\n   uint256 length = inputTokens.length;\n    IRedSnwapper.InputToken[] memory _inputTokens = new IRedSnwapper.InputToken[](length);\n    for (uint256 i = 0; i < length; ++i) {\n        // Pre-fund RedSnwapper with input tokens\n        _safeTransfer(\n            inputTokens[i].token,\n            address(redSnwapper),\n            inputTokens[i].amountIn\n        );\n        // Build _inputTokens with zero amountIn\n        _inputTokens[i] = IRedSnwapper.InputToken({\n            token: inputTokens[i].token,\n            amountIn: 0,\n            transferTo: inputTokens[i].transferTo\n        });\n    }\n\n    // Execute snwapMultiple\n    amountOut = redSnwapper.snwapMultiple(\n        _inputTokens,\n        outputTokens,\n        executors\n    );\n  }\n\n  /// @notice Withdraw any token or eth from the contract\n  /// @dev can only be called by owner\n  /// @param token The address of the token to be withdrawn, 0x0 for eth\n  /// @param to The address to send the token to\n  /// @param _value The amount of the token to be withdrawn\n  function withdraw(address token, address to, uint256 _value) onlyOwner external {\n    if (token != address(0)) {\n      _safeTransfer(token, to, _value);\n    } \n    else {\n      (bool success, ) = to.call{value: _value}(\"\");\n      require(success);\n    }\n  }\n  \n  function _safeTransfer(address token, address to, uint value) internal {\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(TRANSFER_SELECTOR, to, value));\n    if (!success || (data.length != 0 && !abi.decode(data, (bool)))) revert TransferFailed();\n  }\n\n  /// @notice In case we receive any unwrapped eth (native token) we can call this\n  /// @dev operators can call this \n  function wrapEth() onlyTrusted external {\n    weth.call{value: address(this).balance}(\"\");\n  }\n\n  /// @notice Available function in case we need to do any calls that aren't supported by the contract (unwinding lp positions, etc.)\n  /// @dev can only be called by owner\n  /// @param to The address to send the call to\n  /// @param _value The amount of eth to send with the call\n  /// @param data The data to be sent with the call\n  function doAction(address to, uint256 _value, bytes memory data) onlyOwner external {\n    (bool success, ) = to.call{value: _value}(data);\n    require(success);\n  }\n\n  receive() external payable {}\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}